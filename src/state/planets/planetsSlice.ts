import {
  createAsyncThunk,
  createSlice,
  PayloadAction,
  current,
} from "@reduxjs/toolkit";
import { RootState, AppThunk } from "../store";
import { IPlanet } from "./types";
import { STATUS } from "../../constants";
import { getIdFromUrl } from "../../utils";
import { fetchPlanet } from "../../services/service";

export interface PlanetsState {
  planets: IPlanet[];
  status: string;
}

const initialState: PlanetsState = {
  planets: [],
  status: STATUS.IDLE,
};

export const getPlanet = createAsyncThunk(
  "planets/fetchPlanet",
  async (id: number, thunkAPI) => {
    try {
      const response: IPlanet = await fetchPlanet(id);
      return response;
    } catch (error: any) {
      const message: string = error.message || error.toString();
      return thunkAPI.rejectWithValue(message);
    }
  }
);

export const planetsSlice = createSlice({
  name: "planets",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getPlanet.pending, (state) => {
        state.status = STATUS.LOADING;
      })
      .addCase(getPlanet.fulfilled, (state, action) => {
        state.status = STATUS.IDLE;
        if (
          !state.planets.find((planet) => planet.url === action.payload.url)
        ) {
          state.planets.push({
            ...action.payload,
            id: getIdFromUrl(action.payload.url),
          });
        }
      })
      .addCase(getPlanet.rejected, (state) => {
        state.status = STATUS.FAILED;
      });
  },
});

export const selectPlanets = (state: RootState) => state.planets;

export default planetsSlice.reducer;
